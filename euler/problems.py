import numpy as np

# https://stackoverflow.com/a/60956561/5217293
def register_problem(f):
    """
    Creates an attribute on the method, so it can
    be identied as a function to call
    """
    f._is_problem = True
    return f

def current(f):
    """
    Creates an attribute on the method, so it can
    be identied as the only function to call, 
    assuming this decorator is only used once
    """
    f._is_current = True
    return f

# utility functions

def get_prime_factors(n):
    factors = []

    if n % 2 == 0:
        while n % 2 == 0:
            factors.append(2)
            n /= 2

    max = int(np.sqrt(n))
    for i in range(3, max+1):
        if n % i == 0:
            while n % i == 0:
                factors.append(i)
                n /= i

    if n > 2:
        factors.append(i)

    return factors


class Problems:
    def __init__(self, only_current = False):
        self.problem_methods = {}
        for name in dir(self):
            attr = getattr(self,name)
            if getattr(attr,"_is_problem",False):
                if only_current:
                    if getattr(attr, "_is_current", False):
                        self.problem_methods[name] = attr
                else:
                    self.problem_methods[name] = attr

    def run(self):
        for _,method in self.problem_methods.items():
            print(f"\t{'='*40}")
            print(method.__doc__)
            print(f"\tResult: {method()}")
            print(f"\t{'='*40}")
            print()

    @register_problem
    def __1(self):
        """\thttps://projecteuler.net/problem=1
        If we list all the natural numbers below 10 that are multiples of 3 or 5, 
        we get 3, 5, 6 and 9. The sum of these multiples is 23.

        Find the sum of all the multiples of 3 or 5 below 1000.
        """

        # 999 because we are only going up to 1000, not including
        N = 999 // 3
        Q = 999 // 5
        R = 999 // 15
        _3sum = (N * (N + 1)) / 2
        _5sum = (Q * (Q + 1)) / 2
        _15sum = (R * (R + 1)) / 2
        return int(3 * _3sum + 5 * _5sum - 15 * _15sum) 
        #return sum([i for i in range(1000) if i % 3 == 0 or i % 5 == 0])
    
    @register_problem
    def __2(self):
        """\thttps://projecteuler.net/problem=2
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million,
        find the sum of the even-valued terms.
        """
        # tuple unpacking
        # a tuple is an object in parentheses, like (1,2)
        # any two variables separated by a comma are implictly converted
        # to a tuple
        # you can unpack (assign values to variables), by giving a variable
        # for each item in the tuple
        a, b = 0, 1
        acc = 0

        # e is scientific notation here, 4 * 10 ^ 6
        # oh, to raise a number to a power in python, use 2 stars
        # the mathematical expresion 2^2 is written, in python, like 2 ** 2
        # the ^ is the XOR operator, exclusive or. it is a bitwise operator
        while b <= int(4e6):
            if b % 2 == 0:
                acc += b
            b, a = a+b, b
        return acc

    @current
    @register_problem
    def __2(self):
        """\thttps://projecteuler.net/problem=3
        The prime factors of 13195 are 5, 7, 13 and 29.

        What is the largest prime factor of the number 600851475143 ?
        """

        return get_prime_factors(600851475143)[-1]